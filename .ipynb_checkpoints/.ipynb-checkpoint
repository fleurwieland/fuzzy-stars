{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "Assignment \n",
    "Filename: \"dspl.py\"\n",
    "Date: 2020\n",
    "Authors: Fleur Wieland, Nancy Subke, Justus Holman\n",
    "Group: 1\n",
    "'''\n",
    "\n",
    "###########################################################\n",
    "### Imports\n",
    "import numpy as np                       # for numerical methods\n",
    "import matplotlib.pyplot as plt          # for plotting \n",
    "import pandas as pd                      # for data input and output\n",
    "import scipy.stats as st                 # for statistical functions\n",
    "from numpy.polynomial import Polynomial as P\n",
    "from scipy.interpolate import interp1d\n",
    "import matplotlib.dates as mdates\n",
    "import math \n",
    "import copy\n",
    "\n",
    "###########################################################\n",
    "TEST\n",
    "ugh ugh ugh\n",
    "\n",
    "#######\n",
    "def parta():\n",
    "    #global df\n",
    "    #global data\n",
    "    #global df2\n",
    "    \n",
    "    names= [\"salary\",\"pcsalary\", \"sales\", \"roe\", \"pcroe\", \"ros\", \"indus\",\n",
    "            \"finance\", \"consprod\", \"utility\", \"lsalary\", \"lsales\"]\n",
    "    \n",
    "    data = pd.read_csv('data1.csv', delimiter=';', names = np.arange(0,len(names)))\n",
    "    #print(data)\n",
    "    #data = pd.DataFrame(columns=np.arange(0,data.shape[1]))\n",
    "    \n",
    "    \n",
    "    df = pd.DataFrame(columns=np.arange(0,len(names)))\n",
    "    \n",
    "    \n",
    "    df.loc[0] = names\n",
    "    df = df.append([data], ignore_index=True)\n",
    "    \n",
    "    df_copy = df.copy()\n",
    "    \n",
    "    print(df_copy)\n",
    "    \n",
    "    df2 = df_copy.drop([6, 7, 8, 9, 10, 11], axis=1)\n",
    "    \n",
    "    \n",
    "    \n",
    "    #df2.columns = [0,1,2,3,4,5,6,7]\n",
    "    print(df2)\n",
    "\n",
    "\n",
    "    #print(df.iloc[0, 0])\n",
    "    \n",
    "    salary = df[0]   #in thousands\n",
    "    print(salary)\n",
    "    \n",
    "    for i in range(1, df2.shape[1]):\n",
    "        \n",
    "        title = df2.iloc[0,i]\n",
    "        print(title)\n",
    "        vCol = df2[i]\n",
    "        #print(vCol[1:])\n",
    "        \n",
    "        createhist(vCol[1:], title)\n",
    "        #summaryStatistics(vCol[1:], len(df), title)\n",
    "        createscatter(salary[1:], vCol[1:], title, salary.iloc[0])\n",
    "        \n",
    " \n",
    "# =============================================================================\n",
    "#     plt.subplot(1,3,2)\n",
    "#     createhist(data2018_T, data1962_T, \"temperature\", \"celcius\", \"2018\", \"1962\")\n",
    "#     \n",
    "#     plt.subplot(1,3,3)\n",
    "#     createhist(dataRH_sub2018, dataRH_sub1962, \"rain\", \"mm\", \"2018\", \"1962\")\n",
    "# =============================================================================\n",
    " \n",
    "    \n",
    "    \n",
    "    #You hypothesize that return on equity is a proper measure.\n",
    " \n",
    "    roe = df2[3] #return on equity\n",
    "    \n",
    "    simple_lin_reg(roe)\n",
    "\n",
    "\n",
    "def simple_lin_reg(X1):\n",
    "    \n",
    "    \n",
    "\n",
    "# =============================================================================\n",
    "# Compute con\n",
    "dence intervals and hypothesis tests (signi\n",
    "cance and\n",
    "# magnitude of coe\u000ecients);\n",
    "# Interpret coe\u000ecients (depends on how X and Y are measured!);\n",
    "# Assess the accuracy of the model (e.g. residual standard error, R2,\n",
    "# \u0016 R2);\n",
    "# Make predictions for Y .\n",
    "# Perform (misspeci\n",
    "cation) tests on residuals ^\" (why?).\n",
    "# =============================================================================\n",
    "  \n",
    "#Estimating a simple linear regression could be a nice starting point, but is probably not\n",
    "#very realistic as the CEO's compensation is modeled in such a way that it only depends\n",
    "#on a single variable.\n",
    "\n",
    "def createhist(data, title):\n",
    "    #Creates a histogram of the given data with its accessory information.    \n",
    "    \n",
    "    #min_data = (min(data))\n",
    "    #max_data = (max(data))\n",
    "    \n",
    "    plt.hist(data, color=('red'))\n",
    "    plt.title(title,fontweight='bold')\n",
    "    #plt.xticks(np.arange(min_data, max_data, max_data/10))\n",
    "    #plt.xlabel(xlabel) \n",
    "    #plt.legend([a_label,b_label])  \n",
    "    plt.show()\n",
    "    \n",
    "def summaryStatistics(vX, iN, text):\n",
    "    print (text)\n",
    "    dMean = np.mean( vX ) \n",
    "    print('mean:', \"%.2f\" %  dMean )\n",
    "    dVar = iN/(iN-1) * np.var( vX ) \n",
    "    dStdev = np.sqrt( dVar ) \n",
    "    print('stdev:', \"%.2f\" %  dStdev )\n",
    "    dMax = np.max(vX)\n",
    "    print('max:',\"%.2f\" % dMax )\n",
    "    dMin = np.min(vX)\n",
    "    print('min:', \"%.2f\" % dMin)\n",
    "    \n",
    "def createscatter(vX, vY, xaxis, yaxis):\n",
    "    plt.plot( vX , vY , \".\" )\n",
    "    plt.ylabel(yaxis)\n",
    "    plt.xlabel(xaxis)\n",
    "    #plt.title(title)\n",
    "    plt.show()\n",
    "    \n",
    "    \n",
    "   \n",
    "\n",
    "\n",
    "###########################################################\n",
    "### main\n",
    "def main():\n",
    "    parta()\n",
    "    \n",
    "\n",
    "###########################################################\n",
    "### start main\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
